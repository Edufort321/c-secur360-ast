import { NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

export async function GET() {
  try {
    console.log('üîÑ Connecting to database...')
    
    // Se connecter √† la base de donn√©es
    await prisma.$connect()
    console.log('‚úÖ Connected to database')
    
    // Forcer la cr√©ation des tables avec une requ√™te SQL brute
    console.log('üìã Creating tables...')
    
    // Ex√©cuter les migrations pour cr√©er les tables
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "tenants" (
        "id" TEXT NOT NULL PRIMARY KEY,
        "subdomain" TEXT NOT NULL UNIQUE,
        "companyName" TEXT NOT NULL,
        "plan" TEXT NOT NULL DEFAULT 'basic',
        "isActive" BOOLEAN NOT NULL DEFAULT true,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP
      )
    `
    
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "users" (
        "id" TEXT NOT NULL PRIMARY KEY,
        "email" TEXT NOT NULL UNIQUE,
        "name" TEXT,
        "password" TEXT NOT NULL,
        "role" TEXT NOT NULL DEFAULT 'user',
        "tenantId" TEXT NOT NULL,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP
      )
    `
    
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "ast_forms" (
        "id" TEXT NOT NULL PRIMARY KEY,
        "tenantId" TEXT NOT NULL,
        "userId" TEXT NOT NULL,
        "projectNumber" TEXT NOT NULL,
        "clientName" TEXT NOT NULL,
        "workLocation" TEXT NOT NULL,
        "clientRep" TEXT,
        "emergencyNumber" TEXT,
        "astMdlNumber" TEXT NOT NULL,
        "astClientNumber" TEXT,
        "workDescription" TEXT NOT NULL,
        "status" TEXT NOT NULL DEFAULT 'draft',
        "generalInfo" JSONB,
        "teamDiscussion" JSONB,
        "isolation" JSONB,
        "hazards" JSONB,
        "controlMeasures" JSONB,
        "workers" JSONB,
        "photos" JSONB,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP
      )
    `
    
    console.log('‚úÖ Tables created successfully')
    
    // Maintenant cr√©er les tenants
    console.log('üìã Creating demo tenant...')
    const demoTenant = await prisma.tenant.upsert({
      where: { subdomain: 'demo' },
      update: {},
      create: {
        subdomain: 'demo',
        companyName: 'D√©mo AST MDL',
        plan: 'demo'
      }
    })
    
    console.log('üìã Creating C-Secur360 tenant...')
    const csecurTenant = await prisma.tenant.upsert({
      where: { subdomain: 'c-secur360' },
      update: {},
      create: {
        subdomain: 'c-secur360',
        companyName: 'C-Secur360',
        plan: 'premium'
      }
    })
    
    await prisma.$disconnect()
    
    return NextResponse.json({ 
      success: true, 
      message: 'üéâ Tables et tenants cr√©√©s avec succ√®s! V√©rifiez Supabase maintenant.',
      tenants: [demoTenant, csecurTenant]
    })
    
  } catch (error: any) {
    console.error('‚ùå Database error:', error)
    return NextResponse.json({ 
      success: false, 
      error: error.message
    }, { status: 500 })
  }
}
