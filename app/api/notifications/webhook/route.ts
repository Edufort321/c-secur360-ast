// =================== WEBHOOK NOTIFICATIONS SMS ===================
import { NextRequest, NextResponse } from 'next/server';

// Interface pour les donn√©es webhook Twilio
interface TwilioWebhookData {
  MessageSid: string;
  From: string;
  To: string;
  Body: string;
  SmsStatus: string;
  AccountSid: string;
  MessageStatus?: string;
  ErrorCode?: string;
  ErrorMessage?: string;
}

// Interface pour les confirmations de travailleurs
interface WorkerConfirmation {
  phone: string;
  response: string;
  messageId: string;
  confirmedAt: string;
  isValid: boolean;
}

// Fonction pour valider les r√©ponses de confirmation
function validateWorkerResponse(responseBody: string): { isValid: boolean; response: string } {
  const cleanResponse = responseBody.trim().toLowerCase();
  
  // R√©ponses valides en fran√ßais et anglais
  const validResponses = [
    'oui', 'yes', 'ok', 'confirm', 'confirm√©', 'valide', 'valid',
    'compris', 'understood', 're√ßu', 'received', 'acquitt√©', 'acknowledged'
  ];
  
  const isValid = validResponses.some(valid => cleanResponse.includes(valid));
  
  return {
    isValid,
    response: responseBody.trim()
  };
}

// Fonction pour parser le num√©ro de t√©l√©phone
function parsePhoneNumber(phone: string): string {
  // Nettoyer et formatter le num√©ro
  return phone.replace(/[^\d+]/g, '');
}

// POST - Recevoir les webhooks Twilio
export async function POST(request: NextRequest) {
  try {
    const body = await request.text();
    console.log('üìû [WEBHOOK] R√©ception webhook SMS:', body);

    // Parser les donn√©es du webhook (format application/x-www-form-urlencoded)
    const webhookData: TwilioWebhookData = Object.fromEntries(
      new URLSearchParams(body).entries()
    ) as any;

    console.log('üìû [WEBHOOK] Donn√©es pars√©es:', webhookData);

    // V√©rifier que c'est bien un message re√ßu (pas un statut d'envoi)
    if (!webhookData.Body || !webhookData.From) {
      console.log('üìû [WEBHOOK] Webhook de statut ignor√© (pas un message entrant)');
      return NextResponse.json({ status: 'ignored' });
    }

    // Parser et valider la r√©ponse du travailleur
    const validation = validateWorkerResponse(webhookData.Body);
    const cleanPhone = parsePhoneNumber(webhookData.From);

    const confirmation: WorkerConfirmation = {
      phone: cleanPhone,
      response: validation.response,
      messageId: webhookData.MessageSid,
      confirmedAt: new Date().toISOString(),
      isValid: validation.isValid
    };

    console.log('üìû [WEBHOOK] Confirmation analys√©e:', confirmation);

    // Ici on pourrait enregistrer en base de donn√©es
    // await saveConfirmationToDatabase(confirmation);

    // Simuler l'enregistrement de la confirmation
    console.log('‚úÖ [WEBHOOK] Confirmation enregistr√©e:', {
      worker: `Travailleur avec ${cleanPhone}`,
      response: validation.response,
      isValid: validation.isValid,
      timestamp: confirmation.confirmedAt
    });

    // Envoyer confirmation automatique si la r√©ponse est valide
    if (validation.isValid) {
      const confirmationMessage = validation.response.toLowerCase().includes('oui') || validation.response.toLowerCase().includes('yes')
        ? `‚úÖ CONFIRMATION RE√áUE\n\nVotre confirmation "${validation.response}" a √©t√© enregistr√©e avec succ√®s.\n\nHeure: ${new Date().toLocaleString('fr-CA', { timeZone: 'America/Montreal' })}\n\nMerci de prioriser votre s√©curit√©.`
        : `‚úÖ R√âPONSE RE√áUE\n\nVotre message "${validation.response}" a √©t√© enregistr√©.\n\nHeure: ${new Date().toLocaleString('fr-CA', { timeZone: 'America/Montreal' })}\n\nPour confirmer officiellement, r√©pondez "OUI".`;

      // En production, renvoyer un SMS de confirmation via Twilio
      console.log(`üì± [AUTO-REPLY] Envoi confirmation √† ${cleanPhone}:`, confirmationMessage);
    } else {
      // R√©ponse non reconnue - demander clarification
      const clarificationMessage = `‚ùì R√âPONSE NON RECONNUE\n\nVotre message "${validation.response}" n'a pas √©t√© reconnu comme une confirmation.\n\nPour confirmer la r√©ception de l'alerte LOTO, r√©pondez:\n‚Ä¢ "OUI" (fran√ßais)\n‚Ä¢ "YES" (anglais)\n‚Ä¢ "OK"\n\nCette confirmation est OBLIGATOIRE pour votre s√©curit√©.`;
      
      console.log(`üì± [AUTO-REPLY] Demande clarification √† ${cleanPhone}:`, clarificationMessage);
    }

    // R√©ponse de succ√®s pour Twilio
    return NextResponse.json({
      status: 'processed',
      confirmation: {
        messageId: webhookData.MessageSid,
        from: cleanPhone,
        response: validation.response,
        isValid: validation.isValid,
        processedAt: new Date().toISOString()
      },
      message: 'Confirmation processed successfully'
    });

  } catch (error) {
    console.error('‚ùå [WEBHOOK] Erreur traitement webhook:', error);
    
    return NextResponse.json(
      { 
        error: 'Erreur interne du webhook',
        code: 'WEBHOOK_PROCESSING_ERROR',
        details: process.env.NODE_ENV === 'development' ? (error instanceof Error ? error.message : "Unknown error") : undefined
      },
      { status: 500 }
    );
  }
}

// GET - Statut du webhook
export async function GET() {
  try {
    const webhookStatus = {
      service: 'SMS Webhook API',
      status: 'active',
      timestamp: new Date().toISOString(),
      endpoints: {
        webhook: '/api/notifications/webhook',
        purpose: 'Receive SMS replies and confirmations from workers'
      },
      supportedResponses: [
        'oui', 'yes', 'ok', 'confirm', 'confirm√©',
        'compris', 'understood', 're√ßu', 'received'
      ],
      environment: process.env.NODE_ENV || 'development'
    };

    return NextResponse.json(webhookStatus);
    
  } catch (error) {
    console.error('‚ùå [WEBHOOK] Erreur status webhook:', error);
    
    return NextResponse.json(
      { 
        error: 'Erreur lors de la r√©cup√©ration du statut webhook',
        code: 'WEBHOOK_STATUS_ERROR'
      },
      { status: 500 }
    );
  }
}